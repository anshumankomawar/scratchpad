// Prevents additional console window on Windows in release, DO NOT REMOVE!!
#![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]

use std::{collections::HashMap, path::PathBuf};
use std::sync::Mutex;
use tauri::Wry;
use tauri_plugin_store::{with_store, StoreCollection};
use reqwest::{Client, Url, header::{ACCESS_CONTROL_ALLOW_CREDENTIALS, CONTENT_TYPE}};
use serde_json::json;
use tauri::{State, api::path::app_config_dir, Config};
use tauri_plugin_store::{Store, StoreBuilder};
use tauri::Manager;

struct TauriState {
    client: Client,
    store: Mutex<Store<Wry>>
}

impl TauriState {
    fn new(store: Store<Wry>) -> Self {
        Self {
            client: Client::new(),
            store: Mutex::new(store)
        }
    }
}

// Learn more about Tauri commands at https://tauri.app/v1/guides/features/command
#[tauri::command]
async fn greet(username: &str, password: &str, state: State<'_, TauriState>) ->  Result<String, String> {
    state.store.lock().unwrap().insert("a".to_string(), json!("b")).unwrap();
    state.store.lock().unwrap().save().map_err(|e| return e.to_string())?;
    return Ok("stored string".to_string());
    //let params = [("username", &username), ("password", &password)];
    //let url = Url::parse(&format!("http://localhost:8000/login")).map_err(|e| e.to_string())?;
    //let res = state.client.post(url)
    //.form(&params)
    //.header(ACCESS_CONTROL_ALLOW_CREDENTIALS, "true")
    //.header(CONTENT_TYPE, "application/x-www-form-urlencoded")
    //.send()
    //.await.map_err(|e| e.to_string())?;
    ////.json::<HashMap<String, String>>()
    ////.await.map_err(|e| e.to_string())?;

    //Ok(HashMap::new())
}

#[tauri::command]
async fn check(state: State<'_, TauriState>) ->  Result<String, String> {
    let store = state.store.lock().map_err(|e| e.to_string())?;
    match store.get("a") {
        Some(a) => Ok(a.to_string()),
        None => Ok("no value".to_string()) 
    }
    //return Ok(state.store.lock().unwrap().get("a").unwrap().to_string());
}

fn main() {
    tauri::Builder::default()
        .plugin(tauri_plugin_store::Builder::default().build())
        .setup(|app| {
            //let config_dir = app.handle().path_resolver().resource_dir().unwrap_or(std::path::PathBuf::new()).to_string_lossy();

            //let stores = app.state::<StoreCollection<Wry>>();
            //let path = PathBuf::from("path/to/the/storefile");

            //with_store(app.handle(), stores, path, |store| store.insert("a".to_string(), json!("b")));
            let mut store = StoreBuilder::new(app.handle(), "settings.json".parse().unwrap()).build();
            store.load().map_err(|e| e.to_string()));
            app.manage(TauriState::new(store));
            Ok(())
        })
        .invoke_handler(tauri::generate_handler![greet, check])
        .run(tauri::generate_context!())
        .expect("error while running tauri application");
}
